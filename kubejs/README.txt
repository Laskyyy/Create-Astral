Find more info on the website: https://kubejs.com/

This project uses [Vite](https://vite.dev/) to generate bundles out of scripts written in TypeScript.

Directory information:

assets - Acts as a resource pack, you can put any client resources in here, like textures, models, etc. Example: assets/kubejs/textures/item/test_item.png
data - Acts as a datapack, you can put any server resources in here, like loot tables, functions, etc. Example: data/kubejs/loot_tables/blocks/test_block.json

startup_scripts - Scripts that get loaded once during game startup - Used for adding items and other things that can only happen while the game is loading (Can be reloaded with /kubejs reload_startup_scripts, but it may not work!)
server_scripts - Scripts that get loaded every time server resources reload - Used for modifying recipes, tags, loot tables, and handling server events (Can be reloaded with /reload)
client_scripts - Scripts that get loaded every time client resources reload - Used for JEI events, tooltips and other client side things (Can be reloaded with F3+T)

config - KubeJS config storage. This is also the only directory that scripts can access other than world directory
exported - Data dumps like texture atlases end up here

You can find type-specific logs in logs/kubejs/ directory

ğŸ“¦ kubejs
â”£ ğŸ“‚ assets: Global assets - acts like a global resource pack.
â”£ ğŸ“‚ data: Global data - acts like a global datapack.
â”£ ğŸ“‚ config: Stores KubeJS configuration. KubeJS scripts may access this directory.
â”ƒ â”£ ğŸ“œ client.properties
â”ƒ â”— ğŸ“œ common.properties - allows to disable the KubeJS class filter in order to access any Java class for reflection.
â”£ ğŸ“‚ src: Hosts script source code which is then bundled by Vite.
â”£ â”£ ğŸ“‚ client: Holds all client scripts, like REI events, ponders, etc. Gets bundled into `client_scripts/client.js`
â”£ â”£ â”£ ğŸ“‚ scripts: Holds client modules.
â”£ â”£ â”— ğŸ“œ client.ts: Client script entrypoint - calls other client modules.
â”£ â”£ ğŸ“‚ server: Holds all server scripts, like recipes, block loot, etc. Gets bundled into `server_scripts/server.js`
â”£ â”£ â”£ ğŸ“‚ scripts: Holds server modules.
â”£ â”£ â”— ğŸ“œ server.ts: Server script entrypoint - calls other server modules.
â”£ â”£ ğŸ“‚ startup: Holds all startup scripts, that add items, fluids, etc. Gets bundled into `startup/startup.js`
â”£ â”£ â”£ ğŸ“‚ scripts: Holds startup modules.
â”£ â”£ â”— ğŸ“œ startup.ts: Startup script entrypoint - calls other startup modules.
â”£ â”£ ğŸ“‚ types: Holds TypeScript type definitions for scripts.
â”£ â”£ â”£ ğŸ“‚ custom: Holds custom types - mostly used to fill gaps in ProbeJS dump.
â”£ â”£ â”— ğŸ“‚ probe: The ProbeJS dump, which is manually fixed because of ProbeJS oversights.
â”£ ğŸ“œ README.md: The README for the kubejs folder
â”£ ğŸ“œ package-lock.json: Package lock file. **Do not edit this directly!**.
â”£ ğŸ“œ package.json: Defines npm scripts and dependencies.
â”£ ğŸ“œ tsconfig.json: Contains TypeScript configuration.
â”— ğŸ“œ vite.config.ts: Contains Vite configuration.
  ğŸ“‚ client_scripts: **Generated by Vite**
  â”— ğŸ“œ client.js - A bundle of all client scripts. **Do not edit this directly!**
  ğŸ“‚ server_scripts: **Generated by Vite**
  â”— ğŸ“œ server.js - A bundle of all server scripts. **Do not edit this directly!**
  ğŸ“‚ startup_scripts: **Generated by Vite**
  â”— ğŸ“œ startup.js - A bundle of all startup scripts. **Do not edit this directly!**